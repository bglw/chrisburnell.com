////
/// Functions
/// @group abstracts
////

///
/// Return an HLS(A) color
///
/// @param {String} $value - key from `hsl` map
/// @param {String} $opacity [null] - key from `opacity` map
///
/// @throw Error if no parameter is passed.
///
/// @return {Color}
///
@function h($value, $opacity: null) {
	@if not $opacity {
		@return hsl(var(--hsl-#{$value}));
	}
	@return hsla(var(--hsl-#{$value}) / var(--opacity-#{$opacity}));
}

///
/// Remap a number from one range to another
///
/// @param {Number} $number - Initial Value
/// @param {Number} $ranges - 2/4 minimum/maximum values representing the ranges
///
/// @example scss
///   $variable: range-map(2, 4, 100);
///   // $variable: 50;
///
/// @example scss
///   $variable: range-map(68, 30, 160, 0, 100);
///   // $variable: 42.5;
///
/// @return {Number} Number re-mapped in new range
///
@function range-map($number, $ranges...) {
	@if not $number or not $ranges or not (length($ranges) == 2 or length($ranges) == 4) {
		@warn "`range-map()` requires three or five parameters: initial number, (old minimum), old maximum, (new minimum), and new maximum.";
		@return false;
	}

	$old-minimum: if(length($ranges) == 2, 0, nth($ranges, 1));
	$old-maximum: if(length($ranges) == 2, nth($ranges, 1), nth($ranges, 2));
	$new-minimum: if(length($ranges) == 2, 0, nth($ranges, 3));
	$new-maximum: if(length($ranges) == 2, nth($ranges, 2), nth($ranges, 4));

	@if $old-minimum >= $old-maximum {
		@warn "old maximum must be greater than old minimum";
		@return false;
	}
	@if $new-minimum >= $new-maximum {
		@warn "new maximum must be greater than new minimum";
		@return false;
	}
	@if $number < $old-minimum {
		@warn "initial number must be greater than old minimum";
		@return false;
	}
	@if $number > $old-maximum {
		@warn "initial number must be less than old maximum";
		@return false;
	}

	@return math.div($number - $old-minimum, $old-maximum - $old-minimum) * ($new-maximum - $new-minimum) + $new-minimum;
}

///
/// Calculate Luminance of a Color
///
/// @param {Color} $color - Color to calculate luminance from
///
/// @throw Error if no parameters are passed.
///
/// @return {Color} Contrasting Text Color
///
@function luminance($color) {
	@if not $color {
		@error "`luminance()` expects one parameter.";
	}

	$colors: (
		"red": red($color),
		"green": green($color),
		"blue": blue($color),
	);

	@each $name, $value in $colors {
		$value: math.div($value, 255);

		@if $value < 0.03928 {
			$value: math.div($value, 12.92);
		} @else {
			$value: math.div($value + 0.055, 1.055);
			$value: math.pow($value, 2.4);
		}

		$colors: map-merge(
			$colors,
			(
				$name: $value,
			)
		);
	}

	@return (map-get($colors, "red") * 0.2126) + (map-get($colors, "green") * 0.7152) + (map-get($colors, "blue") * 0.0722);
}

///
/// Contrasting Text Color
///
/// @param {Color} $background-color - Background-color to contrast against
/// @param {Color} $text-color-light [$color-milou] - Color for dark backgrounds
/// @param {Color} $text-color-dark [$color-thunder] - Color for light backgrounds
///
/// @example scss
///   background-color: #111111;
///   color: contrasting-color(#111111);
///   // background-color: #111111;
///   // color: #f9f9f9;
///
/// @throw Error if no parameters are passed.
///
/// @return {Color} Contrasting Text Color
///
@function contrasting-color($background-color, $text-color-dark: "mineshaft", $text-color-light: "milou") {
	@if not $background-color {
		@warn "`contrasting-color()` expects at least one parameter.";
		@return false;
	}

	@if luminance($background-color) > 0.5 {
		@return h(#{$text-color-dark});
	}

	@return h(#{$text-color-light});
}
