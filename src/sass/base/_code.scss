////
/// Code
/// @group base
/// @link https://chrisburnell.com/styleguide/#code-block
////

// Monospace Elements
code,
kbd,
samp,
var,
.monospace {
    @extend %monospace-elements !optional;
    @include font-family(monospace);
    font-variant-numeric: proportional-nums;
}
code,
kbd,
samp {
    @include v(font-size, small);
}

// Inline Code Examples
%heading-elements code,
%content-elements code,
ins,
mark,
samp,
var {
    // force text to wrap
    overflow-wrap: break-word;
}
%heading-elements code,
%content-elements code,
del,
ins,
kbd,
mark,
samp {
    @include border-radius(thin);
    padding: #{$measure-one-relative / 4};
    @include v(line-height, medium);
}
%heading-elements code,
%content-elements code,
samp {
    @include v(background-color, raven--gamma);
}
kbd {
    @include case(uppercase);
    box-shadow: inset 0 0 0 $border-width-hairline $color-kaiser;
    box-shadow: inset 0 0 0 var(--border-width-hairline) var(--color-kaiser);
}
mark {
    @include v(background-color, highlight);
    @include v(font-size, default);
}
var {
    @include v(color, raven);
    font-style: normal;
    @include v(font-weight, bold);
}

pre {
    margin: 0 0 $measure-large;
    margin: 0 0 var(--measure-large);
}

// Code Blocks
figure pre {
    width: auto;
    min-width: 10vw;
    margin-bottom: 0;
    tab-size: 4;

    // Main Code Blocks
    &:not(.codepen) {
        @include border-radius;
        @include font-family(monospace);
        @include v(background-color, mineshaft);
        @include v(color, white);
        padding: $measure-medium $measure-medium $measure-one;
        padding: var(--measure-medium) var(--measure-medium) var(--measure-one);
        // disallow text from wrapping inside the container
        overflow-x: auto;
        overflow-y: hidden;
        @include v(font-size, small);

        &,
        code {
            @include v(line-height, code);
        }

        code {
            min-width: 100%;
            display: block;
            text-shadow: 0 $border-width-hairline $border-width-hairline $color-black--delta;
            text-shadow: 0 var(--border-width-hairline) var(--border-width-hairline) var(--color-black--delta);
        }
    }

    &.codepen {
        // Limit re-paint and re-layout calculations for Pens to the container
        contain: strict;
    }
}

// Solarized Dark Code Highlighting
.highlight {
    position: relative;

    pre {
        width: 100%;
    }

    // Comment
    .c {
        color: #586e75;
    }
    // Error
    .err {
        color: #93a1a1;
    }
    // Generic
    .g {
        color: #93a1a1;
    }
    // Keyword
    .k {
        color: #859900;
    }
    // Literal
    .l {
        color: #93a1a1;
    }
    // Name
    .n {
        color: #93a1a1;
    }
    // Operator
    .o {
        color: #859900;
    }
    // Other
    .x {
        color: #cb4b16;
    }
    // Punctuation
    .p {
        color: #93a1a1;
    }
    // Comment.Multiline
    .cm {
        color: #586e75;
    }
    // Comment.Preproc
    .cp {
        color: #859900;
    }
    // Comment.Single
    .c1 {
        color: #586e75;
    }
    // Comment.Special
    .cs {
        color: #859900;
    }
    // Generic.Deleted
    .gd {
        color: #2aa198;
    }
    // Generic.Emph
    .ge {
        color: #93a1a1;
        font-style: italic;
    }
    // Generic.Error
    .gr {
        color: #dc322f;
    }
    // Generic.Heading
    .gh {
        color: #cb4b16;
    }
    // Generic.Inserted
    .gi {
        color: #859900;
    }
    // Generic.Output
    .go {
        color: #93a1a1;
    }
    // Generic.Prompt
    .gp {
        @include non-selectable;
        color: #93a1a1;
    }
    // Generic.Strong
    .gs {
        color: #93a1a1;
        @include v(font-weight, bold);
    }
    // Generic.Subheading
    .gu {
        color: #cb4b16;
    }
    // Generic.Traceback
    .gt {
        color: #93a1a1;
    }
    // Keyword.Constant
    .kc {
        color: #cb4b16;
    }
    // Keyword.Declaration
    .kd {
        color: #268bd2;
    }
    // Keyword.Namespace
    .kn {
        color: #859900;
    }
    // Keyword.Pseudo
    .kp {
        color: #859900;
    }
    // Keyword.Reserved
    .kr {
        color: #268bd2;
    }
    // Keyword.Type
    .kt {
        color: #dc322f;
    }
    // Literal.Date
    .ld {
        color: #93a1a1;
    }
    // Literal.Number
    .m {
        color: #2aa198;
    }
    // Literal.String
    .s {
        color: #2aa198;
    }
    // Name.Attribute
    .na {
        color: #93a1a1;
    }
    // Name.Builtin
    .nb {
        color: #b58900;
    }
    // Name.Class
    .nc {
        color: #268bd2;
    }
    // Name.Constant
    .no {
        color: #cb4b16;
    }
    // Name.Decorator
    .nd {
        color: #268bd2;
    }
    // Name.Entity
    .ni {
        color: #cb4b16;
    }
    // Name.Exception
    .ne {
        color: #cb4b16;
    }
    // Name.Function
    .nf {
        color: #268bd2;
    }
    // Name.Label
    .nl {
        color: #93a1a1;
    }
    // Name.Namespace
    .nn {
        color: #93a1a1;
    }
    // Name.Other
    .nx {
        color: #93a1a1;
    }
    // Name.Property
    .py {
        color: #93a1a1;
    }
    // Name.Tag
    .nt {
        color: #268bd2;
    }
    // Name.Variable
    .nv {
        color: #268bd2;
    }
    // Operator.Word
    .ow {
        color: #859900;
    }
    // Text.Whitespace
    .w {
        color: #93a1a1;
    }
    // Literal.Number.Float
    .mf {
        color: #2aa198;
    }
    // Literal.Number.Hex
    .mh {
        color: #2aa198;
    }
    // Literal.Number.Integer
    .mi {
        color: #2aa198;
    }
    // Literal.Number.Oct
    .mo {
        color: #2aa198;
    }
    // Literal.String.Backtick
    .sb {
        color: #586e75;
    }
    // Literal.String.Char
    .sc {
        color: #2aa198;
    }
    // Literal.String.Doc
    .sd {
        color: #93a1a1;
    }
    // Literal.String.Double
    .s2 {
        color: #2aa198;
    }
    // Literal.String.Escape
    .se {
        color: #cb4b16;
    }
    // Literal.String.Heredoc
    .sh {
        color: #93a1a1;
    }
    // Literal.String.Interpol
    .si {
        color: #2aa198;
    }
    // Literal.String.Other
    .sx {
        color: #2aa198;
    }
    // Literal.String.Regex
    .sr {
        color: #dc322f;
    }
    // Literal.String.Single
    .s1 {
        color: #2aa198;
    }
    // Literal.String.Symbol
    .ss {
        color: #2aa198;
    }
    // Name.Builtin.Pseudo
    .bp {
        color: #268bd2;
    }
    // Name.Variable.Class
    .vc {
        color: #268bd2;
    }
    // Name.Variable.Global
    .vg {
        color: #268bd2;
    }
    // Name.Variable.Instance
    .vi {
        color: #268bd2;
    }
    // Literal.Number.Integer.Long
    .il {
        color: #2aa198;
    }
}
