////
/// Mixins
/// @group abstracts
////

///
/// Change the case of text and apply appropriate letter-spacing.
///
/// @param {String} $case - Case of Text
/// @param {String} $letter-spacing [null] - Letter-spacing of Text
///
/// @example scss
///   @include case(uppercase);
///   // text-transform: uppercase;
///   // letter-spacing: 1px;
///
@mixin case($case, $letter-spacing: null) {
	@if not $case {
		@error "case() expects at least one parameter.";
	}

	text-transform: $case;

	@if $letter-spacing != null {
		@include v(letter-spacing, $letter-spacing);
	} @else if $case == "uppercase" {
		@include v(letter-spacing, uppercase);
	}
}

///
/// Specify a font-family.
///
/// @author Chris Burnell
///
/// @param {String} $family - Font-family value
///
/// @example scss - One family
///   @include font-family(default);
///   // font-family: "Proxima Nova", sans-serif;
///
/// @throw Error if no parameters are passed.
/// @throw Error if parameter passed does not match a key in $font-families.
///
@mixin font-family($family) {
	@if not $family {
		@error "font-family() expects at least one parameter.";
	}

	$families: map-get($tokens, "font-family");

	@if not map-has-key($families, $family) {
		@error "There is no `font-family` named `#{$family}` in `$font-families`. `font-family` should be one of `#{map-keys($families)}`.";
	}

	@include v(font-family, $family);

	@if $family == "monospace" {
		font-variant-ligatures: none;
	}
}

///
/// Space out elements evenly
///
@mixin owl($measure: large) {
	$measures: map-get($tokens, "measure");
	@if not map-has-key($measures, $measure) {
		@error "There is no `measure` named `#{$measure}` in `$measures`. `measure` should be one of `#{map-keys($measures)}`.";
	}

	& > * + * {
		@include v(margin-block-start, $measure);
	}
}

///
/// Generate transitions based on flexible input parameters.
/// Pass zero or more properties and zero to two further parameters.
/// If passing two or more properties, quotation marks must be used.
///
/// @author Chris Burnell
///
/// @param {String} $transitions - Transitions
///
/// @example scss - Zero parameters
///   @include transition;
///   // transition: all var(--transition-duration-default) var(--transition-function-default);
///
/// @example scss - One property
///   @include transition(color);
///   // transition: color var(--transition-duration-default) var(--transition-function-default);
///
/// @example scss - Two properties
///   @include transition(color, border);
///   // transition: color var(--transition-duration-default) var(--transition-function-default), border var(--transition-duration-default) var(--transition-function-default);
///
/// @example scss - One property, one duration
///   @include transition(color 0.5s);
///   // transition: color 0.5s var(--transition-function-default);
///
/// @example scss - One property, one duration, one timing function
///   @include transition(color 1s linear);
///   // transition: color 1s linear;
///
/// @example scss - Two properties, two durations, two timing functions
///   @include transition(color 2s ease-in-out, border 1s linear);
///   // transition: color 2s ease-in-out, border 1s linear;
///
@mixin transition($transitions...) {
	$transition: ();

	// if no parameter, transition all with default duration and function
	@if length($transitions) == 0 {
		$transition: all v(transition-duration) v(transition-function);
	}
	// if parameter just set to `none` then just transition nothing
	@else if $transitions == none {
		$transition: none;
	}
	// if the parameter contains a comma then operating on multiple properties
	@else if str-index(#{$transitions}, ",") {
		@each $transition-segment in $transitions {
			$transition: append($transition, unpack-transition($transition-segment), comma);
		}
	} @else {
		$transition: unpack-transition($transitions...);
	}

	transition: $transition;
}

///
/// Break words.
///
@mixin break-words() {
	overflow-wrap: break-word;
	word-break: break-word;
}

///
/// Visually hide an element properly.
///
@mixin hidden() {
	inline-size: 1px !important;
	block-size: 1px !important;
	padding: 0 !important;
	margin: -1px !important;
	border: 0 !important;
	overflow: hidden !important;
	position: absolute !important;
	white-space: nowrap !important;
	clip: rect(0 0 0 0) !important;
	clip-path: inset(100%) !important;
}

///
/// Hyphenate words.
///
@mixin hyphenate() {
	hyphens: auto;
	hyphenate-limit-chars: 6 3 3;
	hyphenate-limit-lines: 2;
	hyphenate-limit-last: always;
	hyphenate-limit-zone: 8%;
}

///
/// Make text non-selectable.
///
/// @author Chris Burnell
///
@mixin non-selectable() {
	user-select: none;
	-webkit-touch-callout: default;
	-webkit-touch-callout: none;
}

///
/// Make text non-interactive.
///
/// @author Chris Burnell
///
@mixin non-interactive() {
	@include non-selectable;
	pointer-events: none;
	cursor: not-allowed; // kind of redundant
}

///
/// Define characters for quotes
///
/// @author Chris Burnell
///
/// @example scss
///   @include quotes;
///   // quotes: "“" "”" "‘" "’";
///
@mixin quotes() {
	hanging-punctuation: first;

	&,
	:lang(en) & {
		quotes: "“" "”" "‘" "’";
	}

	:lang(de) &,
	:lang(pl) & {
		quotes: "„" "“" "‚" "‘";
	}

	:lang(fr) & {
		quotes: "« " " »" "‹ " " ›";
	}
}

///
/// Tabular Lining Numerals
///
/// @author Chris Burnell
///
@mixin tabular-lining-numerals() {
	font-variant-numeric: lining-nums tabular-nums;
	font-feature-settings: "lnum", "tnum";
}
