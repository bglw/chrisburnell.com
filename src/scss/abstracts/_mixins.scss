////
/// Mixins
/// @group abstracts
////

///
/// Absolutely position an element.
///
/// @author Chris Burnell
///
/// @param {String} $position - Position of the element
/// @param {String} $offset [0] - How much to offset from the position
///
/// @example scss
///   @include absolute(bottom-left);
///   // position: absolute;
///   // bottom: 0;
///   // left: 0;
///
/// @example scss
///   @include absolute(right, medium);
///   // position: absolute;
///   // right: var(--measure-medium);
///   // top: 50%;
///   // transform: translateY(-50%);
///
/// @example scss
///   @include absolute(top-full);
///   // position: absolute;
///   // top: 0;
///   // right: 0;
///   // left: 0;
///
/// @example scss
///   @include absolute(top-full, medium);
///   // position: absolute;
///   // top: var(--measure-medium);
///   // right: 0;
///   // left: 0;
///
/// @example scss
///   @include absolute(top-full-offset, medium);
///   // position: absolute;
///   // top: var(--measure-medium);
///   // right: var(--measure-medium);
///   // left: var(--measure-medium);
///
/// @throw Error if no parameters are passed.
///
@mixin absolute($position, $offset: 0) {
    @if not $position {
        @error "absolute() expects one parameter.";
    } @else if $position == none {
        position: relative;
        top: auto;
        right: auto;
        bottom: auto;
        left: auto;
    } @else if $position == center {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translateX(-50%) translateY(-50%);
    } @else if str-index(#{$position}, "full") {
        position: absolute;

        @if str-index(#{$position}, "top") {
            top: v(measure, $offset);

            @if str-index(#{$position}, "offset") {
                right: v(measure, $offset);
                left: v(measure, $offset);
            } @else {
                right: 0;
                left: 0;
            }
        } @else if str-index(#{$position}, "right") {
            right: v(measure, $offset);

            @if str-index(#{$position}, "offset") {
                top: v(measure, $offset);
                bottom: v(measure, $offset);
            } @else {
                top: 0;
                bottom: 0;
            }
        } @else if str-index(#{$position}, "bottom") {
            bottom: v(measure, $offset);

            @if str-index(#{$position}, "offset") {
                right: v(measure, $offset);
                left: v(measure, $offset);
            } @else {
                right: 0;
                left: 0;
            }
        } @else if str-index(#{$position}, "left") {
            left: v(measure, $offset);

            @if str-index(#{$position}, "offset") {
                top: v(measure, $offset);
                bottom: v(measure, $offset);
            } @else {
                top: 0;
                bottom: 0;
            }
        } @else {
            top: v(measure, $offset);
            right: v(measure, $offset);
            bottom: v(measure, $offset);
            left: v(measure, $offset);
        }
    } @else if is-edge($position) {
        position: absolute;

        @if str-index(#{$position}, "top") {
            top: v(measure, $offset);
            @if not str-index(#{$position}, "-") {
                left: 50%;
                transform: translateX(-50%);
            }
        }
        @if str-index(#{$position}, "right") {
            right: v(measure, $offset);
            @if not str-index(#{$position}, "-") {
                top: 50%;
                transform: translateY(-50%);
            }
        }
        @if str-index(#{$position}, "bottom") {
            bottom: v(measure, $offset);
            @if not str-index(#{$position}, "-") {
                left: 50%;
                transform: translateX(-50%);
            }
        }
        @if str-index(#{$position}, "left") {
            left: v(measure, $offset);
            @if not str-index(#{$position}, "-") {
                top: 50%;
                transform: translateY(-50%);
            }
        }
    }
}

///
/// Add a border-radius.
///
/// @author Chris Burnell
///
/// @param {String} $width - Width of Border Radius
/// @param {String} $edge - Sides of Border Radius
///
/// @example scss - Zero parameters
///   @include radius;
///   // border-radius: 0.375rem;
///
/// @example scss - One parameter
///   @include radius(1em);
///   // border-radius: 1em;
///
@mixin border-radius($width: default, $edge: null) {
    @if not is-length($width) {
        @if map-has-key($border-radii, $width) {
            $width: map-get($border-radii, $width);
        } @else if is-edge($width) {
            $edge: $width;
            $width: $border-radius-default;
        } @else {
            @error "There is no `width` named `#{$width}` in `$border-radii`. `width` should be one of `#{map-keys($border-radii)}`.";
        }
    }

    $border-radius: $width;

    @if $edge and is-edge($edge) {
        $top-left: if(index((top, left, top-left), $edge), $width, 0);
        $top-right: if(index((top, right, top-right), $edge), $width, 0);
        $bottom-right: if(index((bottom, right, bottom-right), $edge), $width, 0);
        $bottom-left: if(index((bottom, left, bottom-left), $edge), $width, 0);

        $border-radius: $top-left $top-right $bottom-right $bottom-left;
    }

    background-clip: padding-box;
    border-radius: $border-radius;
}

///
/// Change the case of text and apply appropriate letter-spacing.
///
/// @param {String} $case - Case of Text
/// @param {String} $letter-spacing [null] - Letter-spacing of Text
///
/// @example scss
///   @include case(uppercase);
///   // text-transform: uppercase;
///   // letter-spacing: 1px;
///
@mixin case($case, $letter-spacing: null) {
    @if not $case {
        @error "case() expects at least one parameter.";
    }

    text-transform: $case;

    @if $letter-spacing != null {
        @include v(letter-spacing, $letter-spacing);
    } @else if $case == "uppercase" {
        @include v(letter-spacing, uppercase);
    }
}

///
/// Specify a font-family.
///
/// @author Chris Burnell
///
/// @param {String} $family - Font-family value
///
/// @example scss - One family
///   @include font-family(default);
///   // font-family: "Proxima Nova", sans-serif;
///
/// @throw Error if no parameters are passed.
/// @throw Error if parameter passed does not match a key in $font-families.
///
@mixin font-family($family) {
    @if not $family {
        @error "font-family() expects at least one parameter.";
    }

    @if not map-has-key($font-families, $family) {
        @error "There is no `font-family` named `#{$family}` in `$font-families`. `font-family` should be one of `#{map-keys($font-families)}`.";
    }

    @include v(font-family, $family);

    @if $family == "monospace" {
        font-variant-ligatures: none;
    }
}

///
/// Space out elements evenly
///
@mixin owl($measure: large) {
    @if not map-has-key($measures, $measure) {
        @error "There is no `measure` named `#{$measure}` in `$measures`. `measure` should be one of `#{map-keys($measures)}`.";
    }

    & > * + * {
        @include v(margin-top, $measure);
    }
}

///
/// Reset Font Size
///
/// @author Chris Burnell
///
/// @example scss
///   ul {
///       @include reset-font-size(li);
///   }
///   // ul {
///   //     font-size: 0;
///   // }
///   // ul > li {
///   //     font-size: 1rem;
///   // }
///
@mixin reset-font-size($child: null, $font-size: default) {
    font-size: 0;

    @if ($child) {
        #{$child} {
            @include v(font-size, $font-size);
        }
    } @else {
        & > * {
            @include v(font-size, $font-size);
        }
    }
}

///
/// Generate transitions based on flexible input parameters.
/// Pass zero or more properties and zero to two further parameters.
/// If passing two or more properties, quotation marks must be used.
///
/// @author Chris Burnell
///
/// @param {String} $transitions - Transitions
///
/// @example scss - Zero parameters
///   @include transition;
///   // transition: all var(--transition-duration-default) var(--transition-function-default);
///
/// @example scss - One property
///   @include transition(color);
///   // transition: color var(--transition-duration-default) var(--transition-function-default);
///
/// @example scss - Two properties
///   @include transition(color, border);
///   // transition: color var(--transition-duration-default) var(--transition-function-default), border var(--transition-duration-default) var(--transition-function-default);
///
/// @example scss - One property, one duration
///   @include transition(color 0.5s);
///   // transition: color 0.5s var(--transition-function-default);
///
/// @example scss - One property, one duration, one timing function
///   @include transition(color 1s linear);
///   // transition: color 1s linear;
///
/// @example scss - Two properties, two durations, two timing functions
///   @include transition(color 2s ease-in-out, border 1s linear);
///   // transition: color 2s ease-in-out, border 1s linear;
///
@mixin transition($transitions...) {
    $transition: ();

    // if no parameter, transition all with default duration and function
    @if length($transitions) == 0 {
        $transition: all v(transition-duration, default) v(transition-function, default);
    }
    // if parameter just set to `none` then just transition nothing
    @else if $transitions == none {
        $transition: none;
    }
    // if the parameter contains a comma then operating on multiple properties
    @else if str-index(#{$transitions}, ",") {
        @each $transition-segment in $transitions {
            $transition: append($transition, unpack-transition($transition-segment), comma);
        }
    } @else {
        $transition: unpack-transition($transitions...);
    }

    transition: $transition;
}

///
/// Output a property, CSS Variable, and, optionally, SCSS value
///
/// @author Chris Burnell
///
/// @param {String} $property - key from $property-map or $variable-map
/// @param {String} $value [default] - key from inner map
/// @param {Boolean} $fallback [false] - whether or not to show the SCSS value
///
/// @example scss
///   @include v(padding, small);
///   // padding: var(--measure-small);
/// @example scss
///   @include v(padding, small);
///   // padding: 0.625rem;
///
/// @return Associated property and CSS Variable or SCSS value
///
@mixin v($property, $value: default, $fallback: false) {
    // leverage the v() function and output the CSS Variable(s) and optionally
    // the respective SCSS value(s) as well as the property
    @if $fallback {
        #{$property}: v($property, $value, true);
    }
    #{$property}: v($property, $value);
}

///
/// Output properties and values for all defined themes
///
@mixin t($properties...) {
    @each $theme, $data in $themes {
        @if $theme == "light" {
            @each $property in $properties {
                @if map-has-key($data, $property) {
                    $property-clean: nth(str-split($property, "--"), 1); // first item in the array
                    @include v($property-clean, map-get($data, $property));
                }
            }
        } @else {
            .theme--#{$theme} & {
                @each $property in $properties {
                    @if map-has-key($data, $property) {
                        $property-clean: nth(str-split($property, "--"), 1); // first item in the array
                        @include v($property-clean, map-get($data, $property));
                    }
                }
            }
        }
    }
}

///
/// Break words.
///
@mixin break-words() {
    overflow-wrap: break-word;
    word-break: break-word;
}

///
/// Visually hide an element properly.
///
@mixin hidden() {
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    border: 0 !important;
    overflow: hidden !important;
    position: absolute !important;
    white-space: nowrap !important;
    clip: rect(0 0 0 0) !important;
    clip-path: inset(100%) !important;
}

///
/// Hyphenate words.
///
@mixin hyphenate() {
    hyphens: auto;
    hyphenate-limit-chars: 6 3 3;
    hyphenate-limit-lines: 2;
    hyphenate-limit-last: always;
    hyphenate-limit-zone: 8%;
}

///
/// Make text non-selectable.
///
/// @author Chris Burnell
///
@mixin non-selectable() {
    user-select: none;
    -webkit-touch-callout: default;
    -webkit-touch-callout: none;
}

///
/// Make text non-interactive.
///
/// @author Chris Burnell
///
@mixin non-interactive() {
    @include non-selectable;
    pointer-events: none;
    cursor: not-allowed; // kind of redundant
}

///
/// Define characters for quotes
///
/// @author Chris Burnell
///
/// @example scss
///   @include quotes;
///   // quotes: "“" "”" "‘" "’";
///
@mixin quotes() {
    hanging-punctuation: first;

    &,
    :lang(en) & {
        quotes: "“" "”" "‘" "’";
    }

    :lang(de) &,
    :lang(pl) & {
        quotes: "„" "“" "‚" "‘";
    }

    :lang(fr) & {
        quotes: "« " " »" "‹ " " ›";
    }
}

///
/// Tabular Lining Numerals
///
/// @author Chris Burnell
///
@mixin tabular-lining-numerals() {
    font-variant-numeric: lining-nums tabular-nums;
    font-feature-settings: "lnum", "tnum";
}
