////
/// Functions
/// @group abstracts
////

///
/// Test if `$value` is a valid direction
///
/// @param {*} $value - Value to test
///
/// @throw Error if no parameter is passed.
///
/// @return {Bool}
///
@function is-direction($value) {
    @if not $value {
        @warn "`is-direction()` expects one parameter.";
        @return false;
    }

    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value) == number and index("deg" "grad" "turn" "rad", unit($value));

    @return $is-keyword or $is-angle;
}

///
/// Test if `$value` is a valid corner or side
///
/// @param {*} $value - Value to test
///
/// @throw Error if no parameter is passed.
///
/// @return {Bool}
///
@function is-edge($value) {
    @if not $value {
        @warn "`is-edge()` expects one parameter.";
        @return false;
    }

    $is-side: index((top, right, bottom, left), $value);
    $is-corner: index((top-left, top-right, bottom-right, bottom-left), $value);

    @return $is-side or $is-corner;
}

///
/// Test if `$value` is a valid length
///
/// @param {*} $value - Value to test
///
/// @throw Error if no parameter is passed.
///
/// @return {Bool}
///
@function is-length($value) {
    @if not $value {
        @warn "`is-length()` expects one parameter.";
        @return false;
    }

    $is-length: type-of($value) == number and index("%" "ch" "cm" "em" "ex" "fr" "in" "mm" "pc" "pt" "px" "rem" "vmax" "vmin" "vh" "vw", unit($value));

    @return $is-length;
}

///
/// Combine 3+ Maps
///
/// @param {*} $maps... - List of Maps
///
/// @throw Error if no parameter is passed.
///
/// @return {Map}
///
@function map-multiple-merge($maps...) {
    $merged: ();

    @each $map in $maps {
        $merged: map-merge($merged, $map);
    }
    @return $merged;
}

///
/// Contrasting Text Color
///
/// @param {Color} $background-color - Background-color to contrast against
/// @param {Color} $text-color-light [$color-white] - Color for dark backgrounds
/// @param {Color} $text-color-dark [$color-black] - Color for light backgrounds
///
/// @example scss
///   background-color: #111111;
///   color: contrasting-color(#111111);
///   // background-color: #111111;
///   // color: #f9f9f9;
///
/// @throw Error if no parameters are passed.
///
/// @return {Color} Contrasting Text Color
///
@function contrasting-color($background-color, $text-color-dark: $color-kaiser, $text-color-light: $color-white) {
    @if not $background-color {
        @warn "`contrasting-color()` expects at least one parameter.";
        @return false;
    }

    @if lightness($background-color) > 65 {
        @return $text-color-dark;
    }

    @return $text-color-light;
}

///
/// Accepts 2 or more parameters.
///
/// @param {String} $direction [to bottom] - Gradient direction
/// @param {List} $color-stops - List of Color values
///
/// @example scss - 2 parameters
///   background-image: gradient(white, black);
///   // background-image: linear-gradient(to bottom, white, black);
///
/// @example scss - 3+ parameters
///   background-image: gradient(to top right, red, green, blue);
///   // background-image: linear-gradient(to top right, red, green, blue);
///
/// @throw Error if 2 or more parameters are not passed.
///
/// @return {String} Linear Gradient snippet
///
@function gradient($direction, $color-stops...) {
    @if not $direction and not $color-stops {
        @warn "`gradient()` expects a direction and/or 2 or more colors to gradient between.";
        @return false;
    }

    @if not is-direction($direction) {
        $color-stops: join(#{$direction}, $color-stops);
        $direction: "to bottom";
    }

    @return linear-gradient(#{$direction}, #{$color-stops});
}

///
/// Accepts 2 or 3 parameters.
///
/// @param {String} $direction [to bottom] - Gradient direction
/// @param {List} $color-stops - List of Color values
///
/// @throw Error if 2 or 3 parameters are not passed.
///
/// @return {String} Scrim Gradient snippet
///
@function scrim-gradient($direction, $color-stops...) {
    @if not $direction and not $color-stops {
        @warn "`scrim-gradient()` expects a direction and/or two colors to gradient between.";
        @return false;
    }

    @if not is-direction($direction) {
        $color-stops: join($direction, $color-stops);
        $direction: "to bottom";
    }

    $start-color: nth($color-stops, 1);
    $end-color: nth($color-stops, 2);

    @return linear-gradient(#{$direction}, mix($start-color, $end-color, 100%) 0%, mix($start-color, $end-color, 73.8%) 19%, mix($start-color, $end-color, 54.1%) 34%, mix($start-color, $end-color, 38.2%) 47%, mix($start-color, $end-color, 27.8%) 56.5%, mix($start-color, $end-color, 19.4%) 65%, mix($start-color, $end-color, 12.6%) 73%, mix($start-color, $end-color, 7.5%) 80.2%, mix($start-color, $end-color, 4.2%) 86.1%, mix($start-color, $end-color, 2.1%) 91%, mix($start-color, $end-color, 0.8%) 95.2%, mix($start-color, $end-color, 0.2%) 98.2%, mix($start-color, $end-color, 0%) 100%);
}

///
/// Split `$string` into several parts using `$delimiter`.
///
/// @param {String} $string    - string to split
/// @param {String} $delimiter ('') - string to use as a delimiter to split `$string`
///
/// @return {List}
///
@function str-split($string, $delimiter) {
    $result: ();
    $length: str-length($string);

    @if str-length($delimiter) == 0 {
        @for $i from 1 through $length {
            $result: append($result, str-slice($string, $i, $i));
        }

        @return $result;
    }

    $running: true;
    $remaining: $string;

    @while $running {
        $index: str-index($remaining, $delimiter);

        @if $index {
            $slice: str-slice($remaining, 1, $index - 1);
            $result: append($result, $slice);
            $remaining: str-slice($remaining, $index + str-length($delimiter));
        } @else {
            $running: false;
        }
    }

    @return append($result, $remaining);
}

///
/// Remap a number from one range to another
///
/// @param {Number} $number - Initial Value
/// @param {Number} $ranges - 2/4 minimum/maximum values representing the ranges
///
/// @example scss
///   $variable: range-map(2, 4, 100);
///   // $variable: 50;
///
/// @example scss
///   $variable: range-map(68, 30, 160, 0, 100);
///   // $variable: 42.5;
///
/// @return {Number} Number re-mapped in new range
///
@function range-map($number, $ranges...) {
    @if not $number or not $ranges or not (length($ranges) == 2 or length($ranges) == 4) {
        @warn "`range-map()` requires three or five parameters: initial number, (old minimum), old maximum, (new minimum), and new maximum.";
        @return false;
    }

    $old-minimum: if(length($ranges) == 2, 0, nth($ranges, 1));
    $old-maximum: if(length($ranges) == 2, nth($ranges, 1), nth($ranges, 2));
    $new-minimum: if(length($ranges) == 2, 0, nth($ranges, 3));
    $new-maximum: if(length($ranges) == 2, nth($ranges, 2), nth($ranges, 4));

    @if $old-minimum >= $old-maximum {
        @warn "old maximum must be greater than old minimum";
        @return false;
    }
    @if $number <= $old-minimum {
        @warn "initial number must be greater than old minimum";
        @return false;
    }
    @if $number >= $old-maximum {
        @warn "initial number must be less than old maximum";
        @return false;
    }
    @if $new-minimum >= $new-maximum {
        @warn "new maximum must be greater than new minimum";
        @return false;
    }

    @return ($number - $old-minimum) / ($old-maximum - $old-minimum) * ($new-maximum - $new-minimum) + $new-minimum;
}

///
/// Unique Groups
///
/// @param {List|Map} $data - Data in List/Map format
///
/// @example scss
///   $list:
///     alpha,
///     beta,
///     gamma;
///   @each $unique-group in unique-groups($list) {
///     @each $item in $unique-group {
///       .from-#{nth($item, 1)}-to-#{nth($item, 2)} {
///         color: initial;
///       }
///     }
///   }
///   // .from-alpha-to-beta {
///   //   color: initial;
///   // }
///   // .from-alpha-to-gamma {
///   //   color: initial;
///   // }
///   // .from-beta-to-gamma {
///   //   color: initial;
///   // }
///
/// @throw Error if no parameter is passed.
/// @throw Error if parameter passed is neither a List nor a Map.
///
/// @return {Map} Unique groups
///
@function unique-groups($data, $size: 2) {
    @if not $data or not (type-of($data) == list or type-of($data) == map) {
        @warn "`unique-groups()` expects either a single List or single Map for `$data`.";
        @return false;
    }

    $unique-groups: ();

    @if type-of($data) == list {
        $seen-first: ();
        @each $first in $data {
            $seen-first: append($seen-first, $first);
            $seen-second: ();
            @each $second in $data {
                $seen-second: append($seen-second, $second);
                @if $first != $second and not index($seen-first, $second) {
                    @if $size >= 3 {
                        @each $third in $data {
                            @if $second != $third and not index($seen-second, $third) {
                                $unique-group: ($first, $second, $third);
                                $unique-groups: append($unique-groups, $unique-group);
                            }
                        }
                    } @else {
                        $unique-group: ($first, $second);
                        $unique-groups: append($unique-groups, $unique-group);
                    }
                }
            }
        }
    } @else if type-of($data) == map {
        $seen-first: ();
        @each $first-key, $first-value in $data {
            $seen-first: append($seen-first, $first-key);
            $seen-second: ();
            @each $second-key, $second-value in $data {
                $seen-second: append($seen-second, $second-key);
                @if $first-key != $second-key and not index($seen-first, $second-key) {
                    @if $size >= 3 {
                        @each $third-key, $third-value in $data {
                            @if $second-key != $third-key and not index($seen-second, $third-key) {
                                $unique-group: (
                                    (
                                        $first-key: $first-value
                                    ),
                                    (
                                        $second-key: $second-value
                                    ),
                                    (
                                        $third-key: $third-value
                                    )
                                );
                                $unique-groups: append($unique-groups, $unique-group);
                            }
                        }
                    } @else {
                        $unique-group: (
                            (
                                $first-key: $first-value
                            ),
                            (
                                $second-key: $second-value
                            )
                        );
                        $unique-groups: append($unique-groups, $unique-group);
                    }
                }
            }
        }
    } @else {
        @warn "`unique-groups()` expects either a List or Map `$data` parameter.";
        @return false;
    }

    @return $unique-groups;
}

///
/// Unpack Transition List
///
/// @param {list} $list - Transition list to unpack
///
/// @example scss
///   transition: unpack-transition(all 1s)
///   // transition: all 1s ease;
///
/// @throw Error if no parameter is passed.
///
/// @return {String} Full Transition
///
@function unpack-transition($list) {
    @if not $list {
        @warn "`unpack-transition()` expects a `$list` parameter.";
        @return false;
    }

    $property: nth($list, 1);
    $time: if(length($list) > 1, nth($list, 2), $transition-duration-default);
    $function: if(length($list) > 2, nth($list, 3), $transition-function);
    $delay: if(length($list) > 3, nth($list, 4), 0s);

    @return $property $time $function $delay;
}

///
/// Walk through a List with a Function
///
/// @param {List} $list - List to walk through
/// @param {String} $function - Function to apply to all members
/// @param {ArgList} $args - Extra parameters to pass to the function
///
/// @example scss
///   content: "#{walk(one two three, to-upper-case)}";
///   // content: "ONE TWO THREE";
///
/// @throw Error if no parameters are passed.
/// @throw Error if `$function parameter passed does not match an existing function.
///
/// @return {List} Updated list
///
@function walk($list, $function, $args...) {
    @if not $list and $function {
        @warn "`walk()` expects two or more parameters (`$list`, `$function`, `$args...`).";
        @return false;
    }

    @if not function-exists($function) {
        @warn "There is no function named `#{$function}`.";
        @return false;
    }

    @for $i from 1 through length($list) {
        $list: set-nth($list, $i, call($function, nth($list, $i), $args...));
    }

    @return $list;
}

///
/// Output a property's CSS Cariable or SCSS value
///
@function v($property, $value: default, $fallback: false) {
    @if (index($generic-values, $value)) {
        @return $value;
    }
    @else {
        // if we're passing in a key in the variables Map (e.g. measure)
        @if map-has-key($variable-map, $property) {
            $map-variables: map-get($variable-map, $property);

            // throw a warning if the value does not exist in the associated Map
            @if not map-has-key($map-variables, $value) {
                @warn "There is no value named `#{$value}` in the variable list. The value should be one of `#{map-keys($map-variables)}`.";
            }

            @if $fallback {
                @return map-get($map-variables, $value);
            } @else {
                @return var(--#{$property}-#{$value});
            }
        }
        // otherwise we're passing in a value from the properties Map (e.g. fill)
        @else if map-has-key($property-map, $property) {
            $map-properties: map-get($property-map, $property);
            $nest-name: null;
            $nest-map-name: null;
            $map: null;
            $variable-fallback: null;
            $variable-output: null;

            // if a Nested List, we need to go deeper
            @if type-of($map-properties) == list {
                $nest-name: nth($map-properties, 1);
                $nest-map-name: nth($map-properties, 2);
            }

            // if it is a Nested List
            @if $nest-name {
                // get the map from nested map-name
                $map: map-get($variable-map, $nest-name);
                // get the nested map
                $nest-map: map-get($map, $nest-map-name);

                // throw a warning if the value does not exist
                @if not map-has-key($nest-map, $value) {
                    @warn "There is no value named `#{$value}` in the `#{$nest-name}` variable list. The value should be one of `#{map-keys($nest-map)}`. As a result, the fallback value cannot be provided.";
                }

                @if $fallback {
                    @return map-get($nest-map, $value);
                } @else {
                    @return var(--#{$nest-name}-#{$nest-map-name}-#{$value});
                }
            } @else {
                // get the map from map name
                $map: map-get($variable-map, $map-properties);

                // throw a warning if the value does not exist
                @if not map-has-key($map, $value) {
                    @warn "There is no value named `#{$value}` in the `#{$map-properties}` variable map. The value should be one of `#{map-keys($map)}`. As a result, the fallback value cannot be provided.";
                }

                @if $fallback {
                    @return map-get($map, $value);
                } @else {
                    @return var(--#{$map-properties}-#{$value});
                }
            }
        }
    }
}
