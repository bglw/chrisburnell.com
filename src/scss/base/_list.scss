////
/// List
/// @group base
////

:is(ol, ul) {
	padding: 0;
	margin: 0;
	list-style: none;
}
:is(dl, ol, ul):not([class]),
.default-list {
	// Space out lists nested in a list
	& & {
		@include v(margin-block-start, medium);
	}
}
:is(ol, ul):not([class]),
.default-list {
	@include v(padding-inline-start, medium);
	list-style: initial;

	li {
		@include v(padding-inline-start, medium);

		&:not(:last-child) {
			@include v(margin-block-end, small);
		}

		&::marker {
			color: h(bowhead);
			@include font-family;
			font-style: normal;
			@include v(font-weight, bold);
		}
	}
}
ol:not([class]),
ol.default-list {
	// This class *requires* `default-list` to work
	&:not([class*="continued-list"]) {
		& > li:first-child {
			counter-reset: ordered-list;
		}
	}

	@for $i from 1 through 10 {
		&[start="#{$i}"] {
			counter-increment: ordered-list #{$i - 1} !important;
		}
	}

	& > li {
		counter-increment: ordered-list;

		&::marker {
			content: counters(ordered-list, "-", decimal) ".";
			@include v(font-family, monospace);
			@include v(font-size, small);
		}
	}

	&[type="a"] li::marker,
	&.lower-alpha li::marker {
		content: counters(ordered-list, "-", lower-alpha);
	}

	&[type="A"] li::marker,
	&.upper-alpha li::marker {
		content: counters(ordered-list, "-", upper-alpha);
	}

	&[type="i"] li::marker,
	&.lower-roman li::marker {
		content: counters(ordered-list, "-", lower-roman);
	}

	&[type="I"] li::marker,
	&.upper-roman li::marker {
		content: counters(ordered-list, "-", upper-roman);
	}

	&[reversed] {
		display: flex;
		flex-direction: column-reverse;

		// fix spacing based on reverse ordering
		& > li {
			&:first-child {
				margin-block-end: 0;
			}

			&:not(:first-child) {
				@include v(margin-block-end, small);
			}
		}
	}
}
[counter-reset] {
	counter-reset: ordered-list;
}
dl {
	display: grid;
	grid-template-columns: 100%;
	@include v(column-gap, medium);
	@include v(row-gap, large);
	margin-block-start: 0;
	overflow: hidden;

	@include media("screen", "above:small") {
		grid-template-columns: minmax(min-content, 33.33%) 1fr;
		// grid-template-columns: repeat(auto-fill, max-content 1fr); // broken in Firefox :(
	}

	@include media("screen", "above:700px", "below:medium") {
		grid-template-columns: repeat(2, minmax(min-content, 16.67%) 1fr);
	}

	@include media("screen", "above:985px") {
		grid-template-columns: repeat(2, minmax(min-content, 16.67%) 1fr);
	}

	&.full {
		@include media("screen", "above:small") {
			grid-template-columns: max-content 1fr !important;
		}
	}

	&.compact {
		row-gap: 0.5rem;
	}
}
dt {
	@include v(font-weight, bold);

	%collection-headings {
		@include v(line-height);
	}
}
dd {
	margin: 0;
	vertical-align: top;

	:not([class*="full"]) > &:only-of-type {
		@include media("screen", "above:medium") {
			grid-column: 2 / span 3;
		}
	}
}
